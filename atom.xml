<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[浪花一朵朵]]></title>
  <subtitle><![CDATA[技术是海，深不见底；生活是洋，广不着边；而我如浪花，清澈透明并且舞动双手，仰望天空。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://syxiaqj.github.io/"/>
  <updated>2014-03-02T13:59:18.353Z</updated>
  <id>http://syxiaqj.github.io/</id>
  
  <author>
    <name><![CDATA[员员]]></name>
    <email><![CDATA[syxiaqj@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Mac重装OS X Mavericks]]></title>
    <link href="http://syxiaqj.github.io/2014/03/02/install-mac-os/"/>
    <id>http://syxiaqj.github.io/2014/03/02/install-mac-os/</id>
    <published>2014-03-02T13:49:39.000Z</published>
    <updated>2014-03-02T13:58:26.000Z</updated>
    <content type="html"><![CDATA[<p>这个周末帮我朋友重装了一下Mac系统，花了我一番周折，我想，应该把这个过程记录一下，让下一次重装有迹可循。看到这些文字的朋友，如果你有需要，希望也能帮助到你。</p>
<p>本次重装是U盘启动安装，重装的Mac系统版本是<strong>Mac OS 10.9</strong>。下面图文记录过程。</p>
<ul>
<li>下载系统</li>
<li>制作启动U盘</li>
<li>安装OS X Mavericks</li>
</ul>
<a id="more"></a>

<h3 id="-"><strong>下载系统</strong></h3>
<p>下载地址：<a href="https://itunes.apple.com/cn/app/os-x-mavericks/id675248567?mt=12&amp;ign-mpt=uo%3D4" target="_blank">官网</a>、<a href="http://pan.baidu.com/s/1ABL5d" target="_blank">百度云</a>、<a href="http://kuai.xunlei.com/d/xI86EALdNgBO2GZSad5" target="_blank">迅雷快传</a></p>
<p>下载任何一个都OK，我是从官网下载的。</p>
<h3 id="-u-"><strong>制作启动U盘</strong></h3>
<p>这也是我安装过程中最为折腾的一个环节，网上很多教程其实是对OS X 10.9之前版本的，但又无特别说明，所以按着教程做完，启动盘依然用不了，非常郁闷。特此，说明一下，我安装过程的是针对<strong>OS X 10.9</strong>的。</p>
<p>1、准备一个至少8G的U盘</p>
<p>2、终端执行下面命令，显示隐藏文件，我们会用到隐藏文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>defaults write ~/Library/Preferences/<span class="keyword">com</span><span class="preprocessor">.apple</span><span class="preprocessor">.finder</span> AppleShowAllFiles -bool true
</pre></td></tr></table></figure>


<p>然后重启Finder</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>killall Finder
</pre></td></tr></table></figure>

<p>3、打开下载的安装包，<code>安装OS X Mavericks.app</code>，右键“显示包内容”，找到在“Contents”目录下的&quot;SharedSupport&quot;目录，找到<code>InstallESD.dmg</code></p>
<p><img src="/image/install-mac-os/OSXApp.png" alt="OS X App"></p>
<p><img src="/image/install-mac-os/InstallESD.png" alt="InstallESD.dmg"></p>
<p>4、找到<code>BaseSystem.dmg</code>，这是一个隐藏文件，刚我们显示隐藏文件了，能看到它。双击<code>InstallESD.dmg</code>，就看到了。</p>
<p><img src="/image/install-mac-os/BaseSystem.png" alt="BaseSystem.dmg"></p>
<p>5、用“磁盘工具”抹掉U盘。选中U盘，点击“分区” - “选项” - 选择“GUID”分区表（只有这种分区才能引导安装程序），格式为“Mac OS 扩展（日志式）”，命名随意，点击“应用”。</p>
<p><strong>抹掉之前，切记备份资料</strong></p>
<p><img src="/image/install-mac-os/CleanUDisk_1.png" alt="抹掉U盘">
<img src="/image/install-mac-os/CleanUDisk_2.png" alt="抹掉U盘-选项"></p>
<p>6、将<code>BaseSystem.dmg</code>恢复到我们的U盘。选中我们U盘，“源磁盘”为<code>BaseSystem.dmg</code>（可拖动），“目的磁盘”为我们的U盘（可拖动），点击恢复，输入密码，恢复开始，这一步会花一些时间，耐心等待一会儿。</p>
<p><strong>这步很重要，因为制作OS X 10.9启动U盘跟制作OS X 10.8的启动U盘，这一步是不一样的，大家要格外注意，我就是这步不对，一直搞不定！</strong></p>
<p><img src="/image/install-mac-os/ReCoverBaseSystem.png" alt="恢复BaseSystem到U盘"></p>
<p>我们的启动U盘基本完成，但还是差两步，马上就好了，不着急！</p>
<p>7、删除U盘中System/Installation目录下Packages替身文件，如下图</p>
<p><img src="/image/install-mac-os/DeletePackages.png" alt="删除Packages"></p>
<p>8、将InstallESD.dmg目录下的Packages目录拷贝到U盘的System/Installation中。</p>
<p>9、运行，下面命令将隐藏文件隐藏</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>defaults write <span class="keyword">com</span><span class="preprocessor">.apple</span><span class="preprocessor">.finder</span> AppleShowAllFiles NO
</pre></td></tr></table></figure>

<p>OK，到此我们的启动U盘制作完成了，终于可以开始重装系统了！</p>
<h3 id="-os-x-mavericks-"><strong>安装OS X Mavericks</strong></h3>
<p>OK，重启电脑，按住option，从U盘启动，下面就按部就班的来了。</p>
<p>因为之前电脑分了好几个盘，我把所有盘都合并成一个。如果你也需要用到这个，那就在安装的第一个界面里，左上角的地方找磁盘工具（这里恕我无法截图），对电脑的硬盘进行分区合并处理，这一步跟制作启动U盘时，格式化U盘是一模一样的，Mac OS 扩展（日志式），GUID分区表。</p>
<p>接下来，就没有难度了，一帆风顺，马上搞定！</p>
<p><strong><em>有问题，欢迎通过留言、微博等方式进行沟通</em></strong></p>
]]></content>
    <summary type="html"><![CDATA[<p>这个周末帮我朋友重装了一下Mac系统，花了我一番周折，我想，应该把这个过程记录一下，让下一次重装有迹可循。看到这些文字的朋友，如果你有需要，希望也能帮助到你。</p>
<p>本次重装是U盘启动安装，重装的Mac系统版本是<strong>Mac OS 10.9</strong>。下面图文记录过程。</p>
<ul>
<li>下载系统</li>
<li>制作启动U盘</li>
<li>安装OS X Mavericks</li>
</ul>
]]></summary>
    
      <category term="Mac" scheme="http://syxiaqj.github.io/tags/Mac/"/>
    
      <category term="Mavericks" scheme="http://syxiaqj.github.io/tags/Mavericks/"/>
    
      <category term="10.9" scheme="http://syxiaqj.github.io/tags/10.9/"/>
    
      <category term="Mac" scheme="http://syxiaqj.github.io/categories/Mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初识BeeFramework]]></title>
    <link href="http://syxiaqj.github.io/2014/02/28/bee-learning-1/"/>
    <id>http://syxiaqj.github.io/2014/02/28/bee-learning-1/</id>
    <published>2014-02-28T15:01:27.000Z</published>
    <updated>2014-02-28T16:37:03.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/image/bee-learning-1/beeframework.png" alt="BeeFramework"></p>
<p>之前在<a href="http://www.infoq.com/cn/news/2014/01/interview-author-guohongyu" target="_blank">InfoQ</a>上看到<a href="http://weibo.com/tangqiaoboy?topnav=1&amp;wvr=5&amp;topsug=1" target="_blank">唐巧</a>对<a href="http://weibo.com/gavinkwoe" target="_blank">老郭</a>的采访，采访的内容就是关于BeeFramework。看完那篇采访，感觉应该是个不错的框架，于是乎想学一学。正好，这段时间，工作上有点空闲。也把自己的学习过程记录一下。</p>
<ul>
<li>简介BeeFramework</li>
<li>新建Bee项目</li>
<li>第一个界面</li>
</ul>
<a id="more"></a>

<h3 id="-beeframework-"><strong>简介BeeFramework</strong></h3>
<p>BeeFramework是一个semi-hybrid（半混合）框架，运用XML、CSS、Objective-C构建iOS应用，基于MVC，并且适用于大型App的开发，已经有诸如QQ空间、屈臣氏中国等相当成熟的产品。</p>
<p>这个框架，初初体验的感觉，利用XML+CSS开发效率应该会提高很多。当前的最新的版本0.5.0，并且作者说打算在1.0版本打算做跨平台。</p>
<p>高效、跨平台，这样的框架无论这对开发者还是公司，都会爱不释手的！</p>
<p>作者：<a href="http://weibo.com/gavinkwoe" target="_blank">郭虹宇</a>    <a href="http://weibo.com/u/2987815507" target="_blank">QFish</a></p>
<p>项目地址：<a href="https://github.com/gavinkwoe/BeeFramework" target="_blank">GitHub</a></p>
<p>对于框架的详细说明，在《developer_manual》文档中又较为详细的说明，文档在项目的document目录下，各位自己找找。这里就不多做介绍了。</p>
<h3 id="-bee-"><strong>新建Bee项目</strong></h3>
<p><em>我使用的BeeFramework的版本是0.5.0的，不同版本之间会有一些差异，特此说明一下。</em></p>
<p>对于新知识，理解很重要，当然感觉也很重要。我们先不急着来分析Bee的框架结构，首先，我们来构建一个Bee工程，感觉一下BeeFramework。</p>
<p>构建项目之前有些准备工作需要完成：</p>
<p>1、下载<a href="https://github.com/gavinkwoe/BeeFramework" target="_blank">BeeFramework</a></p>
<p>2、下载Bee项目模板：<a href="https://github.com/qfish/Bee-Xcode-Template.git" target="_blank">Bee-Xcode-Template-master</a></p>
<p>3、下载一个小工具：<a href="https://github.com/qfish/xproj.git" target="_blank">xproj</a>，用来批量进行ARC、非ARC混编的shell脚本。</p>
<p>OK，准备就绪，开始新建Bee工程，我们图文并茂，一步一步来。</p>
<p><strong>1、安装Bee项目模板</strong></p>
<p>解压Bee-Xcode-Template-master，终端cd到该目录，执行以下命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sh <span class="keyword">install</span>.sh
</pre></td></tr></table></figure>

<p><strong>2、新建Bee项目</strong></p>
<p><img src="/image/bee-learning-1/BeeTemplateProject.png" alt="Bee-Template-Project"></p>
<p>运用模板新建的Bee项目，工程框架已经基本有了。结构应该是这样的</p>
<p><img src="/image/bee-learning-1/BeeProjectDir.png" alt="Bee-Project-Dir"></p>
<p>编译一下（Cmd+B），项目有错误，提示<code>Bee.h</code>引用找不到。不着急，我们还没有把BeeFramework框架添加进来。</p>
<p><strong>3、添加BeeFramework</strong></p>
<p>在工程中添加BeeFramework框架项目中的<code>framework</code>文件夹</p>
<p><img src="/image/bee-learning-1/AddFramework.png" alt="Add-Framework"></p>
<p><strong>4、批量添加<code>-fno-objc-arc</code></strong></p>
<p>因为BeeFramework是一个非RAC的框架，现在Xcode5.0以后新建的工程，都默认是ARC工程，所以需要对BeeFramework进行混编处理。</p>
<p><code>framework</code>目录下的所有文件都需要在Build Phases中添加<code>-fno-objc-arc</code>，但是文件非常多，一个个添加，我相信，你会疯掉的。此时，你就需要用到这个小工具：<a href="https://github.com/qfish/xproj.git" target="_blank">xproj</a>。</p>
<p>解压后，将xproj拷贝到工程的根目录下，终端cd到工程的根目录，然后运行下面命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sh xproj <span class="attribute">-s</span> 需要添加编译参数的文件所在的文件夹 <span class="attribute">-t</span> 目标工程文件
</pre></td></tr></table></figure>

<p>轻松搞定给上百个文件添加<code>-fno-objc-arc</code>的工作。让我们来膜拜一下<a href="http://weibo.com/u/2987815507" target="_blank">QFish</a>大神，这是他的杰作！</p>
<p>构建工程完成，编译运行，搞定！</p>
<p>只是现在除了启动页，页面显示的一片黑色，就像我们学习BeeFramework一样，才刚刚起步，什么也不知道。下面我们尝试着给项目添加一些内容，让它看起来不那么单调。</p>
<p><em>你也可以用CocoaPods来管理BeeFramework，CocoaPods会帮你做好上面的3、4两步。如何使用CocoaPods，详见<a href="http://syxiaqj.github.io/2014/02/13/how-to-use-cocoapods-in-ios-project/">这里</a></em></p>
<h3 id="-"><strong>写第一个界面</strong></h3>
<p><strong>首先，我们添加一个<code>AppBoard_iPhone.xml</code></strong></p>
<p>BeeFramework是一个用XML+CSS页面布局的框架，利用模板新建的项目中有<code>AppBoard_iPhone.h</code>，<code>AppBoard_iPhone.m</code>，却没有<code>AppBoard_iPhone.xml</code>，需要我们自己添加。</p>
<p><img src="/image/bee-learning-1/AddXml.png" alt="Add-Xml"></p>
<p>修改<code>AppBoard_iPhone.xml</code>文件中内容如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag">&lt;<span class="title">ui</span> <span class="attribute">namespace</span>=<span class="value">"AppBoard_iPhone"</span>&gt;</span>
	<span class="tag">&lt;<span class="title">linear</span> <span class="attribute">orientation</span>=<span class="value">"h"</span> <span class="attribute">class</span>=<span class="value">"wrapper"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">image</span> <span class="attribute">class</span>=<span class="value">"bg"</span>/&gt;</span>
        <span class="tag">&lt;<span class="title">view</span> <span class="attribute">class</span>=<span class="value">"view blue"</span>/&gt;</span>
    <span class="tag">&lt;/<span class="title">linear</span>&gt;</span>
    <span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
        <span class="class">.wrapper</span> <span class="rules">{
        <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">100</span>%</span></span>;
        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100</span>%</span></span>;
        <span class="rule">}</span></span>
        <span class="class">.view</span> <span class="rules">{
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50</span>%</span></span>;
        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100</span>px</span></span>;
        <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">10</span>px</span></span>;
        <span class="rule">}</span></span>
        <span class="class">.blue</span> <span class="rules">{
        <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#007DBC</span></span></span>;
        <span class="rule">}</span></span>
        <span class="class">.bg</span> <span class="rules">{
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100</span>%</span></span>;
        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100</span>%</span></span>;
        <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
        <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#E6E6FA</span></span></span>;
        <span class="rule">}</span></span>
    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ui</span>&gt;</span>
</pre></td></tr></table></figure>

<p><strong>然后，修改<code>AppDalegate</code></strong></p>
<p>找到AppDalegate中的<code>- (void)load</code>，修改如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>bee<span class="preprocessor">.ui</span><span class="preprocessor">.config</span><span class="preprocessor">.ASR</span> = YES<span class="comment">;	//这句很重要</span>
    
if ( [BeeSystemInfo isDevicePad] )
{
//self<span class="preprocessor">.window</span><span class="preprocessor">.rootViewController</span> = [AppBoard_iPad sharedInstance]<span class="comment">;</span>
	self<span class="preprocessor">.window</span><span class="preprocessor">.rootViewController</span> = [BeeUIStack stackWithFirstBoard:[AppBoard_iPhone sharedInstance]]<span class="comment">;</span>
}
else
{
//self<span class="preprocessor">.window</span><span class="preprocessor">.rootViewController</span> = [AppBoard_iPhone sharedInstance]<span class="comment">;</span>
	self<span class="preprocessor">.window</span><span class="preprocessor">.rootViewController</span> = [BeeUIStack stackWithFirstBoard:[AppBoard_iPhone sharedInstance]]<span class="comment">;</span>
</pre></td></tr></table></figure>

<p><strong>最后，修改<code>AppBoard_iPhone.m</code></strong></p>
<p><code>AppBoard_iPhone.m</code>中有个<code>ON_CREATE_VIEWS</code>方法，添加如下内容</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">self</span><span class="variable">.navigationBarShown</span> = <span class="literal">YES</span>;
<span class="keyword">self</span><span class="variable">.navigationBarTitle</span> = @<span class="string">"浪花一朵朵"</span>;
    
<span class="keyword">self</span><span class="variable">.view</span><span class="variable">.backgroundColor</span> = SHORT_RGB(<span class="number">0x444</span>);
</pre></td></tr></table></figure>

<p>编译，运行！效果如下</p>
<p><img src="/image/bee-learning-1/Result.png" alt="Bee-Result"></p>
<p>虽然，页面还是很简陋，不过没关系，至少页面已经有内容了哦！继续加油学习！</p>
<p><strong><em>大家有问题，欢迎通过留言、微博等多种途径进行交流</em></strong></p>
]]></content>
    <summary type="html"><![CDATA[<p><img src="/image/bee-learning-1/beeframework.png" alt="BeeFramework"></p>
<p>之前在<a href="http://www.infoq.com/cn/news/2014/01/interview-author-guohongyu" target="_blank">InfoQ</a>上看到<a href="http://weibo.com/tangqiaoboy?topnav=1&amp;wvr=5&amp;topsug=1" target="_blank">唐巧</a>对<a href="http://weibo.com/gavinkwoe" target="_blank">老郭</a>的采访，采访的内容就是关于BeeFramework。看完那篇采访，感觉应该是个不错的框架，于是乎想学一学。正好，这段时间，工作上有点空闲。也把自己的学习过程记录一下。</p>
<ul>
<li>简介BeeFramework</li>
<li>新建Bee项目</li>
<li>第一个界面</li>
</ul>
]]></summary>
    
      <category term="Bee" scheme="http://syxiaqj.github.io/tags/Bee/"/>
    
      <category term="iOS" scheme="http://syxiaqj.github.io/tags/iOS/"/>
    
      <category term="Bee" scheme="http://syxiaqj.github.io/categories/Bee/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[将我们的hexo站点部署到git]]></title>
    <link href="http://syxiaqj.github.io/2014/02/24/deploy-to-github/"/>
    <id>http://syxiaqj.github.io/2014/02/24/deploy-to-github/</id>
    <published>2014-02-24T02:41:30.000Z</published>
    <updated>2014-02-24T06:19:45.000Z</updated>
    <content type="html"><![CDATA[<p>直奔主题，让我们来完成hexo的最后一步，将我们的博客部署到git上。让我们的经历，分享给别人，并且让自己博客成为一个跟别人探讨问题，交流技术生活的平台。OK，Let&#39;s begin step by step.</p>
<a id="more"></a>

<h3 id="-github-"><strong>注册一个GitHub账户</strong></h3>
<p>注册GitHub账号，不管有账号的没账号的，不解释。</p>
<h3 id="-repository-"><strong>建立一个repository</strong></h3>
<p>这一步，非常重要，也比较有讲究。repository的命名有两种方式，并且对应的也会有两种hexo的配置方法。</p>
<p><strong>1、yourname.github.io：</strong></p>
<p><strong>2、随意命名，如Blog：</strong></p>
<p>建议使用第一种方式，两种命名方式均可，但是请注意后面的步骤，不同的命名方式需要不同的操作。</p>
<h3 id="-github-pages-"><strong>新建GitHub Pages</strong></h3>
<p>先来了解一下，什么是<a href="https://help.github.com/articles/what-are-github-pages" target="_blank">GitHub Pages</a>。GitHub Pages有User/Organization Pages 和 Project Pages之分，具体的说明，请看<a href="https://help.github.com/articles/user-organization-and-project-pages" target="_blank">说明</a>。</p>
<p>下面图文说明，如何新建一个GitHub Pages</p>
<p>第一步：</p>
<p><img src="/image/deploy-to-github/git_setting.png" alt="点击setting"></p>
<p>第二步：</p>
<p><img src="/image/deploy-to-github/git_createGitPages.png" alt="新建GitHub Pages"></p>
<p>如果的repository的命名是<code>yourname.github.io</code>这样的方式，你的GitHub Pages的域名就是<code>yourname.github.io</code>，这就是User/Organization Pages。<br>如果你的repository的命名是<code>projectname</code>，那么GitHub Pages的域名就是<code>username.github.io/projectname</code>，这就是所谓的Project Pages。</p>
<p>没关系，both ok！</p>
<h3 id="-hexo-"><strong>配置hexo</strong></h3>
<p>编辑hexo目录下的<code>_config.yml</code>文件，配置一下几项：</p>
<p>修改URL项</p>
<pre><code># URL
## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;
url: http://syxiaqj.github.io    #GitHub Pages域名
root: /                #Project Pages 填 /projectname
permalink: :year/:month/:day/:title/
tag_dir: tags
archive_dir: archives
category_dir: categories
code_dir: downloads/code
</code></pre><p>修改Deployment项</p>
<pre><code># Deployment
## Docs: http://zespia.tw/hexo/docs/deployment.html
deploy:
  type: github
  repository: https://...        #你GitHub Pages的URl全路径
  branch: master            #如果是Project Pages，这里填gh-pages
</code></pre><p>重申一下，GitHub Pages分为User/Organization Pages 和 Project Pages，各位不要看错。</p>
<h3 id="-"><strong>部署</strong></h3>
<p>运行命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>hexo <span class="keyword">generate</span>
hexo deploy
</pre></td></tr></table></figure>

<p>上面的两行命令，等于下面一行命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>hexo g <span class="operator">-d</span>
</pre></td></tr></table></figure>

<p><code>g</code>是<code>generate</code>的简写，<code>d</code>是<code>deploy</code>的简写</p>
<h3 id="-github-pages-"><strong>访问你的GitHub Pages</strong></h3>
<p>在浏览器输入GitHub Pages的链接，如<code>yourname.github.io</code> or <code>yourname.github.io/projectname</code>，访问一下，我擦，怎么还是GitHub Pages的默认页。亲，不要着急，GitHub的部署会有最长10分钟的延迟，等会你再访问一下就好了。</p>
<h3 id="-"><strong>后记</strong></h3>
<p>OK，经过一番努力，用hexo这个框架搭建一个我们自己的博客终于搞定了。祝你在积累与分享的路上能够收获更多的东西！</p>
<p><em>工作之余，花了一周多的时间终于将hexo这个系列的东西整理完成了。一件事情完成，总是令人高兴的，就像自己把hexo搭起来的时候；亦或是第一篇博文写完，发布的时候。写博客的无疑是一件花时间的事情，但是在自己整理的过程中会有新的认识与理解，这非常好。</em></p>
<p><em>接下来有什么打算呢？最近正在学习一个开源框架Beeframework，会把我学习心得与成果整理出来。中间也会穿插一下Cocos2d-x的内容，游戏开发我也在学习</em></p>
<p><strong><em>大家有什么问题，欢迎通过留言、微博等多种途径进行交流</em></strong></p>
]]></content>
    <summary type="html"><![CDATA[<p>直奔主题，让我们来完成hexo的最后一步，将我们的博客部署到git上。让我们的经历，分享给别人，并且让自己博客成为一个跟别人探讨问题，交流技术生活的平台。OK，Let&#39;s begin step by step.</p>
]]></summary>
    
      <category term="hexo" scheme="http://syxiaqj.github.io/tags/hexo/"/>
    
      <category term="Mac" scheme="http://syxiaqj.github.io/tags/Mac/"/>
    
      <category term="hexo" scheme="http://syxiaqj.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo命令及Markdown语法]]></title>
    <link href="http://syxiaqj.github.io/2014/02/23/write-blog-with-markdown/"/>
    <id>http://syxiaqj.github.io/2014/02/23/write-blog-with-markdown/</id>
    <published>2014-02-23T05:39:18.000Z</published>
    <updated>2014-02-23T08:15:30.000Z</updated>
    <content type="html"><![CDATA[<p>到现在为止我们还没有自己写过一篇文章，你是不是已经跃跃欲试了！好了，马上就来介绍自己动手完成一篇博文。<br>这篇我们要介绍两部分内容，Markdown与hexo的常用命令。</p>
<a id="more"></a>

<h3 id="-markdown-"><strong>Markdown</strong></h3>
<p>hexo是使用Markdown编辑文章的，我写的这些文章也都是用这种标记语言完成的。所以，我们先从Markdown说起。</p>
<ul>
<li>什么是Markdown</li>
<li>Markdown语法</li>
<li>例文</li>
</ul>
<p>你可以使用vim工具直接编辑md文件，也可以用记事本打开md文件编辑你的文章，也可以Markdown的编辑器编写，有很多在线的编辑器，何有不少客户端的编辑器，我是Mac系统，用的一个叫<a href="http://mouapp.com/" target="_blank"><strong>Mou</strong></a>的编辑器，还比较好使。Windows系统下，你可以自己找一下，应该也会有很好用的编辑器。</p>
<h4 id="-markdown">什么是Markdown</h4>
<p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯和亚伦·斯沃茨。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML文档”。  ——维基百科</p>
<p>先简单介绍一下，Markdown的语法，具体怎么用，我相信大家一看例文就马上明白了。</p>
<h4 id="markdown-">Markdown语法</h4>
<p><strong>1、分段：</strong>  <code>两个回车</code></p>
<p><strong>2、换行</strong>  <code>两个空格 + 回车</code></p>
<p><strong>3、标题</strong> <code>#</code>~<code>######</code> 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题</p>
<p><strong>4、引用</strong>  <code>&gt;</code></p>
<p><strong>5、列表</strong> <code>*</code>，<code>+</code>，<code>-</code>，<code>1.</code>，选其中之一，注意后面有个空格</p>
<p><strong>6、代码区块</strong>  <code>四个空格</code>开头</p>
<p><strong>7、链接</strong>  <code>[文字](链接地址)</code></p>
<p><strong>8、图片</strong>  <code>![图片说明](图片地址)</code>，图片地址可以是本地路劲，也可以是网络地址</p>
<p><strong>9、强调</strong>  <code>**文字**</code>，<code>__文字__</code>，<code>_文字_</code>，<code>*文字*</code></p>
<p><strong>10、代码</strong>  ```，`` </p>
<p>下面来看看例文，你就马上明白，怎么来使用这些符号来写好一篇自己的博文了。</p>
<h4 id="-">例文</h4>
<p>在线编辑器例文：<a href="https://www.zybuluo.com/mdeditor" target="_blank">传送门</a></p>
<p>Mou编辑器：<a href="http://mouapp.com/" target="_blank">下载地址</a></p>
<p>你先试试，用Markdown怎么去些自己的文章，有了例子，还是很容易上手的。</p>
<h3 id="-hexo-"><strong>hexo常用命令</strong></h3>
<p>我们在前面的已经略微的接触了一些hexo的命令，如<code>hexo new &quot;my blog&quot;</code>，<code>hexo server</code>等。下面来介绍一下我们经常会用到的hexo命令</p>
<p><strong>1、新建</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>hexo <span class="keyword">new</span> <span class="string">"my blog"</span>
</pre></td></tr></table></figure>

<p>新建的文件在<code>hexo/source/_posts/my-blog.md</code></p>
<p><strong>2、编译</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>hexo <span class="keyword">generate</span>
</pre></td></tr></table></figure>

<p>一般部署上去的时候都需要编译一下，编译后，会出现一个<code>public</code>文件夹，将所有的md文件编译成html文件</p>
<p><strong>3、开启本地服务</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>hexo <span class="keyword">server</span>
</pre></td></tr></table></figure>

<p>这个命令，我之前已经用过了，开启本地hexo服务用的</p>
<p><strong>4、部署</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>hexo deploy
</pre></td></tr></table></figure>

<p>部署到git上的时候，需要用这个命令，下一篇中，我们会使用到这个命令</p>
<p><strong>5、清除<code>public</code></strong></p>
<p>hexo clean</p>
<p>当<code>source</code>文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</p>
<p>以上这些都是我在使用过程中经常用到的一些hexo命令。最为详细、最为全面的说明文档当然还是在<a href="http://zespia.tw/hexo/docs/commands.html" target="_blank">官网</a>。请各位猛戳。</p>
<h3 id="-"><strong>后记</strong></h3>
<p>OK，下一篇介绍hexo这个系列的最后一篇文章《如何讲博客部署到git上》。</p>
<p><strong><em>大家如果有什么疑问，欢迎通过留言、微博等多种途径进行交流</em></strong></p>
]]></content>
    <summary type="html"><![CDATA[<p>到现在为止我们还没有自己写过一篇文章，你是不是已经跃跃欲试了！好了，马上就来介绍自己动手完成一篇博文。<br>这篇我们要介绍两部分内容，Markdown与hexo的常用命令。</p>
]]></summary>
    
      <category term="hexo" scheme="http://syxiaqj.github.io/tags/hexo/"/>
    
      <category term="Mac" scheme="http://syxiaqj.github.io/tags/Mac/"/>
    
      <category term="hexo" scheme="http://syxiaqj.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo主题]]></title>
    <link href="http://syxiaqj.github.io/2014/02/19/introduce-hexo-theme/"/>
    <id>http://syxiaqj.github.io/2014/02/19/introduce-hexo-theme/</id>
    <published>2014-02-19T09:45:04.000Z</published>
    <updated>2014-02-21T06:12:52.000Z</updated>
    <content type="html"><![CDATA[<p>前一篇文章主要介绍了hexo的目录结构的及文件的作用，这篇文章要介绍一下hexo的主题的目录结构及主要文件的作用，并且以<code>light</code>主题为例，较为详细的了解如何优化自己的博客站点。</p>
<ul>
<li>hexo主题目录结构</li>
<li>如何下载主题</li>
<li>分析<code>light</code>主题</li>
<li>优化主题</li>
</ul>
<a id="more"></a>

<p>官网上对hexo主题的说明文档：<a href="http://zespia.tw/hexo/docs/themes.html" target="_blank">传送门</a></p>
<h3 id="-1-hexo-"><strong>1.hexo的主题目录结构</strong></h3>
<pre><code>|-- themes
   |-- landscape
   |-- light
</code></pre><p>我的目录结构，截图如下：</p>
<p><img src="/image/introduce-hexo-theme/themeDir.png" alt="主题目录"></p>
<p>如上面看到的，有两个<code>landscape</code>，<code>light</code>主题，文件夹名称即为主题名称，还记得上一篇文章hexo主目录中的<code>_config.yml</code>文件<code>Extensions</code>部分中的<code>theme:</code>参数吗，那个参数的值便于这里的文件夹名称对应，值是哪个，便意味着哪个主题得到了你的“宠信”（哈哈）。</p>
<h3 id="-2-"><strong>2.如何下载主题</strong></h3>
<p>hexo拥有丰富的主题供你选择：<a href="https://github.com/tommy351/hexo/wiki/Themes" target="_blank">主题传送门</a></p>
<p>你可以手动下载其中的一款或者几款，然后拷贝到你的<code>themes</code>目录下，搞定！</p>
<p>或者，你cd到<code>themes</code>目录</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="built_in">cd</span> 你的themes目录
</pre></td></tr></table></figure>

<p>然后运行一下命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>git <span class="keyword">clone</span> 主题url
</pre></td></tr></table></figure>

<h3 id="-3-light-"><strong>3.分析<code>light</code>主题</strong></h3>
<p>目录结构</p>
<pre><code>|-- _config.yml
|-- languages/
|-- layout/
|-- LICENSE
|-- README.md
|-- source/
</code></pre><h4 id="-_config-yml-"><strong>_config.yml</strong></h4>
<p>主题配置文件</p>
<h4 id="-languages-"><strong>languages</strong></h4>
<p>语言目录，用于保存语言文件</p>
<h4 id="-layout-"><strong>layout</strong></h4>
<p>布局目录，目录结构</p>
<pre><code>|-- _partial/
|-- _widget/
|-- archive.ejs *
|-- category.ejs *
|-- index.ejs *
|-- layout.ejs *
|-- page.ejs *
|-- post.ejs *
|-- tag.ejs *
</code></pre><p>以上打<code>*</code>的文件表示，每个主题至少需要这些文件。所有的主题都是用<code>layout.ejs</code>作为默认的布局文件，你也可以自定义布局文件。</p>
<p><code>_widget/</code>： 小工具目录，在<code>light</code>主题中对右边栏的控制。</p>
<p><code>_partial/</code>： 组件目录，给博客添加统计、评论等功能</p>
<p>hexo支持很多模板引擎，诸如<a href="(https://github.com/visionmedia/ejs)">EJS</a>，<a href="(http://paularmstrong.github.io/swig/)">Swig</a>，<a href="(https://github.com/haml/haml)">Haml</a>，<a href="(https://github.com/visionmedia/jade)">Jade</a>等，文件以什么后缀，即表示用的是哪个模板引擎，<code>light</code>主题用的是<code>EJS</code>模板。每种模板引擎的语法与使用，各位请点击链接查看，这里就不赘述了。</p>
<h4 id="-source-"><strong>source</strong></h4>
<p>主题资源目录，主题用到的CSS、Javascript等文件需要放在这个目录中，会被编译到hexo的<code>public</code>目录中。</p>
<p>如何进行编译，后面会介绍，我们先赶紧来优化一下自己的博客站点。</p>
<h3 id="-4-"><strong>4.优化主题</strong></h3>
<h4 id="-_config-yml-"><strong>_config.yml</strong></h4>
<p>主题配置配置文件，介绍主要参数</p>
<pre><code>menu:        #站点导航栏 （标签: 路径）
  首页: /
  归档: /archives
  关于: /about

widgets:        #小工具 即站点的右边一栏 页面会按这里的顺序排列
- recent_posts
- category
- weibo_show
- blogroll

excerpt_link: 阅读全文   #默认是Read more 可以改成中文

twitter:    #墙内很少用此鸟，so可以删掉

addthis:    #这个也可以删掉
  enable: true

fancybox: true

baidu_analytics: true    #百度统计，天朝还是这个好使，没办法滴

google_analytics:        #默认统计，多么希望用这个统计，可惜

rss: /atom.xml        #RSS

comment_provider:
</code></pre><h4 id="-"><strong>添加多说</strong></h4>
<p><code>light</code>主题自带的是disqus，国内用户，当然不好使，还是用“多说”好。</p>
<p>1、先在<a href="http://duoshuo.com/" target="_blank">多说</a>注册</p>
<p>2、<a href="http://duoshuo.com/create-site" target="_blank">创建站点</a></p>
<p>3、完成后，在“工具”中，获取通用代码</p>
<pre><code>&lt;!-- Duoshuo Comment BEGIN --&gt;
&lt;div class=&quot;ds-thread&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
var duoshuoQuery = {short_name:&quot;用户名&quot;};
    (function() {
        var ds = document.createElement(&#39;script&#39;);
        ds.type = &#39;text/javascript&#39;;ds.async = true;
        ds.src = &#39;http://static.duoshuo.com/embed.js&#39;;
        ds.charset = &#39;UTF-8&#39;;
        (document.getElementsByTagName(&#39;head&#39;)[0] 
        || document.getElementsByTagName(&#39;body&#39;)[0]).appendChild(ds);
    })();
    &lt;/script&gt;
&lt;!-- Duoshuo Comment END --&gt;
</code></pre><p>4、用下面命令打开comment.ejs</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>vim themes/light/<span class="keyword">layout</span>/_partial/comment.ejs
</pre></td></tr></table></figure>

<p>修改如下</p>
<pre><code>&lt;% if (page.comments){ %&gt;
&lt;section id=&quot;comment&quot;&gt;
    //多说通用代码
&lt;/section&gt;
&lt;% } %&gt;
</code></pre><p>5、Over</p>
<h4 id="-"><strong>添加分享</strong></h4>
<p>虽然某度，我基本不用，但是某度的分享，大家都用，我也就用用。</p>
<p>1、打开<a href="http://share.baidu.com/code" target="_blank">百度分享</a>，获取代码。记得进行<strong>下一步按钮设置</strong>，可以对是否设置页面分享、图片分享、划词分享、按钮类型、风格、图标大小等功能。</p>
<p>2、在<code>themes/light/layout/_partial/</code>目录下，新建一个<code>baidu_analytics.ejs</code>文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>touch themes/light/<span class="keyword">layout</span>/_partial/baidu_analytics.ejs
</pre></td></tr></table></figure>

<p>3、将获取的代码写入<code>baidu_analytics.ejs</code>文件</p>
<p>4、在<code>themes/light/layout/layout.ejs</code>文件中添加百度统计，添加到<code>&lt;/body&gt;</code>标记前</p>
<pre><code>&lt;%- partial(&#39;_partial/baidu_analytics&#39;) %&gt;
</code></pre><h4 id="-show-"><strong>添加微博show</strong></h4>
<p>1、到<a href="http://app.weibo.com/tool/weiboshow" target="_blank">微博开发平台</a>获取代码</p>
<p>2、在<code>themes/light/layout/_widget/</code>目录下，新建一个<code>weibo_show.ejs</code>文件，并且将刚获取的代码，写入该文件</p>
<p>3、在<code>themes/light/_config.yml</code>文件中的<code>widgets</code>中添加<code>weibo_show</code></p>
<pre><code>widgets:
- weibo_show
</code></pre><p>见上面介绍<code>_config.yml</code>内容</p>
<h4 id="-"><strong>添加友情链接</strong></h4>
<p>1、在<code>themes/light/layout/_widget/</code>目录下，新建<code>blogroll.ejs</code></p>
<p>2、编辑文件</p>
<pre><code>&lt;div class=&quot;widget tag&quot;&gt;
&lt;h3 class=&quot;title&quot;&gt;友情链接&lt;/h3&gt;
&lt;ul class=&quot;entry&quot;&gt;
&lt;li&gt;
    &lt;a href=&quot;链接地址&quot; title=&quot;title&quot; target=&quot;_blank&quot;&gt;显示名称&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</code></pre><p>3、在<code>themes/light/_config.yml</code>文件中的<code>widgets</code>中添加<code>blogroll</code></p>
<pre><code>widgets:
- blogroll
</code></pre><p>见上面介绍<code>_config.yml</code>内容</p>
<h4 id="-"><strong>添加“关于”</strong></h4>
<p>作为一个完整的博客站点，<strong>“关于”</strong>页是不能少的。下面，我们在导航栏上添加上这部分内容</p>
<p>1、新建一个页面</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>hexo <span class="keyword">new</span> page <span class="string">"about"</span>
</pre></td></tr></table></figure>

<p>2、编辑<code>source/about/index.md</code>，至于编辑什么，您随意。</p>
<p>3、在主题的配置文件<code>themes/light/_config.yml</code>中添加</p>
<pre><code>menu:
  关于: /about
</code></pre><p>见上面介绍<code>_config.yml</code>内容</p>
<h3 id="-5-"><strong>5.后记</strong></h3>
<p>恩，好了，基本上能优化的东西，都加上了，你本地运行一下<code>hexo generate</code>
<code>hexo server</code>，看看博客的效果，是不是有那么点样子了。</p>
<p>我们的博客，基本上已经搭建好了，但是现在我们只能在本地运行，别人访问不了，这可不行，我们的学习成果与经验是想要分享给朋友的，所以我们要把网站部署到git上。</p>
<p>先不忙，在部署到git上之前，我们先讲一点其他重要的东西，所谓“磨刀不误砍柴工”，下一篇讲《hexo命令以及如何用Markdown写文章》，这个系列的最后一篇，我们介绍如何部署到git，让别人能访问到我们的站点。</p>
]]></content>
    <summary type="html"><![CDATA[<p>前一篇文章主要介绍了hexo的目录结构的及文件的作用，这篇文章要介绍一下hexo的主题的目录结构及主要文件的作用，并且以<code>light</code>主题为例，较为详细的了解如何优化自己的博客站点。</p>
<ul>
<li>hexo主题目录结构</li>
<li>如何下载主题</li>
<li>分析<code>light</code>主题</li>
<li>优化主题</li>
</ul>
]]></summary>
    
      <category term="hexo" scheme="http://syxiaqj.github.io/tags/hexo/"/>
    
      <category term="Mac" scheme="http://syxiaqj.github.io/tags/Mac/"/>
    
      <category term="hexo" scheme="http://syxiaqj.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo的目录结构及作用]]></title>
    <link href="http://syxiaqj.github.io/2014/02/18/structure-of-hexo/"/>
    <id>http://syxiaqj.github.io/2014/02/18/structure-of-hexo/</id>
    <published>2014-02-18T03:12:24.000Z</published>
    <updated>2014-02-19T05:37:27.000Z</updated>
    <content type="html"><![CDATA[<p>今天来整理一下hexo的目录结构，了解hexo每个目录的作用，并且设置全局配置文件<code>_config.yml</code>的相关参数，初步定义属于你自己的博客。我们开始吧！</p>
<p><a id="more"></a></p>
<h3 id="-1-"><strong>1.主目录结构</strong></h3>
<p>主目录，简洁明了</p>
<pre><code>|-- _config.yml
|-- package.json
|-- scaffolds
|-- scripts
|-- source
   |-- _drafts
   |-- _posts
|-- themes
</code></pre><h3 id="-2-"><strong>2.主目录介绍</strong></h3>
<h4 id="-_config-yml-"><strong>_config.yml</strong></h4>
<p>全局配置文件，网站的很多信息都在这里配置，诸如网站名称，副标题，描述，作者，语言，主题，部署等等参数。这个文件下面会做较为详细的介绍。</p>
<h4 id="-package-json-"><strong>package.json</strong></h4>
<p>hexo框架的参数，如果不小心把它删掉了，没关系，新建一个文件，讲内容写入文件，保存就OK了。里面的参数基本上是固定的，如下：</p>
<pre><code>{
  &quot;name&quot;: &quot;hexo&quot;,
  &quot;version&quot;: &quot;2.4.5&quot;,
  &quot;private&quot;: true,
  &quot;dependencies&quot;: {}
}
</code></pre><p>参数也很容易理解，一看就明白，该文件基本上也不需要操作，就不多解释了。</p>
<h4 id="-scaffolds-"><strong>scaffolds</strong></h4>
<p>scaffolds是“脚手架、骨架”的意思，当你新建一篇文章（hexo new &#39;title&#39;）的时候，hexo是根据这个目录下的文件进行构建的。基本不用关心。</p>
<h4 id="-scripts-"><strong>scripts</strong></h4>
<p>脚本目录，此目录下的JavaScript文件会被自动执行。</p>
<h4 id="-source-"><strong>source</strong></h4>
<p>这个目录很重要，新建的文章都是在保存在这个目录下的，有两个子目录：<code>_drafts</code>，<code>_posts</code>。需要新建的博文都放在<code>_posts</code>目录下。  </p>
<p><code>_posts</code>目录下是一个个<code>markdown</code>文件。你应该可以看到一个<code>hello-world.md</code>的文件，文章就在这个文件中编辑。  </p>
<p><code>_posts</code>目录下的md文件，会被编译成html文件，放到<code>public</code>（此文件现在应该没有，因为你还没有编译过）文件夹下。</p>
<h4 id="-themes-"><strong>themes</strong></h4>
<p>网站主题目录，hexo有非常好的主题拓展，支持的主题也很丰富。该目录下，每一个子目录就是一个主题，我的子目录如下：</p>
<pre><code>|-- landscape
   |--
|-- light
   |--
</code></pre><p>我装了两个主题，<code>landscape</code>是我这个hexo版本的默认主题，我自己下载了一个<code>light</code>主题。其实<code>light</code>也是之前版本的默认主题。我使用的的<code>light</code>主题。</p>
<p>你也可以自己下载主题放到该文件下，<a href="https://github.com/tommy351/hexo/wiki/Themes" target="_blank">hexo主题传送门</a></p>
<p>主题目录下我们可以进行很多自定义的操作，诸如，给网站添加微博秀、添加评论组件、添加分享组件、添加统计等等，让自己的博客网站更丰富、有趣、实用。</p>
<p>themes目录结构及优化自己的博客，这些内容我会在下一篇博文中介绍。</p>
<h3 id="-3-_config-yml-"><strong>3._config.yml文件</strong></h3>
<p><code>_config.yml</code>文件的作用上面已经讲过了，下面先呈现以下<code>_config.yml</code>文件中的内容，并对主要参数做简单的介绍</p>
<pre><code># Hexo Configuration
## Docs: http://zespia.tw/hexo/docs/configuration.html
## Source: https://github.com/tommy351/hexo/

# Site    #站点信息配置
title: 浪花一朵朵        #网站标题
subtitle: 技术是海，深不见底；生活是洋，广不着边；而我如浪花，清澈透明并且舞动双手，仰望天空。        #网站副标题
description: 浪花一朵朵        #网站描述，网站上不会显示出来，但搜索引擎会用到改字段
author: 员员        #作者
email: syxiaqj@gmail.com    #联系邮箱
language: zh-CN        #语言，简体中文当然用zh-CN

# URL    #部署到公网，信息配置，后面介绍如何将网站部署到git上时介绍此信息
## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;
url: http://syxiaqj.github.io    
root: /
permalink: :year/:month/:day/:title/
tag_dir: tags
archive_dir: archives
category_dir: categories
code_dir: downloads/code

# Directory
source_dir: source
public_dir: public

# Writing
new_post_name: :title.md # File name of new posts
default_layout: post
auto_spacing: false # Add spaces between asian characters and western characters
titlecase: false # Transform title into titlecase
external_link: true # Open external links in new tab
max_open_file: 100
multi_thread: true
filename_case: 0
render_drafts: false
post_asset_folder: false
highlight:
  enable: true
  line_number: true
  tab_replace:

# Category &amp; Tag
default_category: uncategorized
category_map:
tag_map:

# Archives
## 2: Enable pagination        #启用分页
## 1: Disable pagination    #不启用分页
## 0: Fully Disable            #完全不可见
archive: 1
category: 1
tag: 1

# Server
## Hexo uses Connect as a server
## You can customize the logger format as defined in
## http://www.senchalabs.org/connect/logger.html
port: 4000
logger: false
logger_format:

# Date / Time format
## Hexo uses Moment.js to parse and display date
## You can customize the date format as defined in
## http://momentjs.com/docs/#/displaying/format/
date_format: MMM D YYYY
time_format: H:mm:ss

# Pagination
## Set per_page to 0 to disable pagination
per_page: 10
pagination_dir: page

# Disqus
disqus_shortname:
# Extensions
## Plugins: https://github.com/tommy351/hexo/wiki/Plugins
## Themes: https://github.com/tommy351/hexo/wiki/Themes
theme: light        #使用的主题名称
exclude_generator:
plugins:            #插件列表
- hexo-generator-feed
- hexo-generator-sitemap

# Markdown
## https://github.com/chjj/marked
markdown:
  gfm: true
  pedantic: false
  sanitize: false
  tables: true
  breaks: true
  smartLists: true
  smartypants: true

# Deployment        #部署到公网配置，后面介绍部署到git上时再详细介绍
## Docs: http://zespia.tw/hexo/docs/deployment.html
deploy:
  type: github
  repository: https://github.com/syxiaqj/syxiaqj.github.io.git    
</code></pre><p>先不要急于修改其他参数，我们文件中的第一部分<code>Site</code>(站点信息)，很容易改，还有主题，在<code>Extensions</code>中的<code>theme:</code>参数，这个参数的值就是hexo主目录中<code>themes</code>（主题目录）下子目录文件夹的名称（主题）。</p>
<p>建议先设置成<code>light</code>，因为我都会以<code>light</code>主题为例做较为详细的介绍</p>
<h3 id="-4-"><strong>4.后记</strong></h3>
<p>好了，本地运行一下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>hexo <span class="keyword">server</span>
</pre></td></tr></table></figure>

<p>浏览器访问<code>localhost:4000/</code>，网站的标题，副标题等信息是不是都已经更改了！恭喜你，对自己的博客网站的简单的全局设置已经成功了。</p>
<p>下一篇会详细介绍一下<code>light</code>主题，主题的目录结构，文件关联，并对网站添加更多有意思、并且也很实用的功能。</p>
]]></content>
    <summary type="html"><![CDATA[<p>今天来整理一下hexo的目录结构，了解hexo每个目录的作用，并且设置全局配置文件<code>_config.yml</code>的相关参数，初步定义属于你自己的博客。我们开始吧！</p>
<p>]]></summary>
    
      <category term="hexo" scheme="http://syxiaqj.github.io/tags/hexo/"/>
    
      <category term="Mac" scheme="http://syxiaqj.github.io/tags/Mac/"/>
    
      <category term="hexo" scheme="http://syxiaqj.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用hexo搭建属于自己的博客]]></title>
    <link href="http://syxiaqj.github.io/2014/02/17/how-to-use-hexo/"/>
    <id>http://syxiaqj.github.io/2014/02/17/how-to-use-hexo/</id>
    <published>2014-02-17T07:54:29.000Z</published>
    <updated>2014-02-19T14:51:30.000Z</updated>
    <content type="html"><![CDATA[<p>如果你是一名技术人员，用点点、轻博客这类的博客网站写技术文章，是不是觉得不给力呢？在博客园、OSChina等技术论坛上写技术博文，还是不错的。但是，你知道不知道，还有更酷的方式，那就是自己搭建一个博客！是的，当我听到这个消息的时候，我已经迫不及待了！</p>
<p>搭建个人的静态博客网站，有很多优秀的框架，诸如jekyll，Octopress，WordPress等，当然这些我都没用过（哈哈）。我使用的是江湖号称“快速、轻量、易拓展”的hexo。</p>
<p><a id="more"></a>
我把自己搭建博客的过程整理了一下，希望对需要的人有帮助（包括我自己）。硬件</p>
<ul>
<li>简介hexo</li>
<li>安装环境</li>
<li>安装hexo</li>
<li>运行hexo</li>
</ul>
<p>说明一下，我用的Mac电脑，所以以下部分，都是在Mac上完成的。</p>
<h3 id="-hexo-"><strong>简介hexo</strong></h3>
<p>关于什么是hexo，我想引用作者的一段话：</p>
<pre><code>Hexo is a fast, simple and powerful blog framework. It parses your posts with Markdown or other render engine and generates static files with the beautiful theme. All of these just take seconds.
</code></pre><p>简单、快速、易拓展，非常具有吸引力。</p>
<p>Git项目：<a href="https://github.com/tommy351/hexo" target="_blank">hexo项目</a><br>官方文档：<a href="http://zespia.tw/hexo/" target="_blank">hexo文档</a></p>
<h3 id="-"><strong>安装环境</strong></h3>
<p>安装hexo是非常简单的，但是在安装hexo前，需要先安装一下所需要的环境。安装<strong>Node.js</strong>和<strong>Git</strong></p>
<p>这个在官方文档上又比较详细的说明<a href="http://zespia.tw/hexo/docs/" target="_blank">hexo document</a>，这里就不在赘述了。<br>不过我在安装Node.js过程中还是遇到了问题，对于没有接触过Node.js的小白来说，遇到这样的问题总是很蛋疼的，没办法，只能求助于了解Node.js的大神，结果帮人家帮我搞定了，万幸。 </p>
<p>虽然我无法准确的说清楚是什么原因，但是大概是两个方面的原因：<br>1、安装node.js的版本不对<br>2、环境变量有问题</p>
<h3 id="-hexo-"><strong>安装hexo</strong></h3>
<p>运行下面命令</p>
<pre><code>$ npm install -g hexo
</code></pre><p>如果Git、Node.js安装正确，安装hexo，是非常easy的，轻松愉快搞定。如果报错，大概是环境安装有问题。</p>
<p>成功安装了hexo后，我们要怎么使用呢，我看下面。</p>
<h3 id="-hexo-"><strong>运行hexo</strong></h3>
<p>1、初始化<code>hexo init &lt;folder&gt;</code>，<code>&lt;folder&gt;</code>就是路径，执行完后，去看看该路径下的文件夹，目录大概是这样的</p>
<p><img src="/image/how-to-use-hexo/hexoDir.png" alt="hexo文件夹"><br>2、运行如下命令<code>hexo server</code><br>3、浏览器访问<code>localhost:4000/</code>看看，恭喜你，已经有一篇博客已经出现了（默认会有一篇“Hello World”的博文)</p>
<h3 id="-"><strong>后记</strong></h3>
<p>至此，用hexo在本地搭建自己的博客，已经完成了。后面会根据我自己的理解，介绍一下hexo的目录结构，如何使用主题、插件，如何将博客部署到git上等内容，今天就到这里了！</p>
]]></content>
    <summary type="html"><![CDATA[<p>如果你是一名技术人员，用点点、轻博客这类的博客网站写技术文章，是不是觉得不给力呢？在博客园、OSChina等技术论坛上写技术博文，还是不错的。但是，你知道不知道，还有更酷的方式，那就是自己搭建一个博客！是的，当我听到这个消息的时候，我已经迫不及待了！</p>
<p>搭建个人的静态博客网站，有很多优秀的框架，诸如jekyll，Octopress，WordPress等，当然这些我都没用过（哈哈）。我使用的是江湖号称“快速、轻量、易拓展”的hexo。</p>
<p>]]></summary>
    
      <category term="hexo" scheme="http://syxiaqj.github.io/tags/hexo/"/>
    
      <category term="Mac" scheme="http://syxiaqj.github.io/tags/Mac/"/>
    
      <category term="hexo" scheme="http://syxiaqj.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用CocoaPods来管理第三方库]]></title>
    <link href="http://syxiaqj.github.io/2014/02/13/how-to-use-cocoapods-in-ios-project/"/>
    <id>http://syxiaqj.github.io/2014/02/13/how-to-use-cocoapods-in-ios-project/</id>
    <published>2014-02-13T02:36:23.000Z</published>
    <updated>2014-02-20T09:53:04.000Z</updated>
    <content type="html"><![CDATA[<p>在求快、求快、求更快的IT行业，项目的开发效率一直被视为项目成功与否的关键因素。作为开发人员，如果码码躬亲，当然不太可取，能利用别人的开源的第三方类库，那是最好不过的事情了。然而当一个项目中使用了十几个第三方类库的时候，你有没有想过要如何管理这些类库呢？<br>在iOS项目中，<strong>CocoaPods</strong>便是这样一款工具。</p>
<p><a id="more"></a>
<a href="https://github.com/CocoaPods/CocoaPods" target="_blank">CocoaPods github</a><br><a href="http://cocoapods.org/" target="_blank">CocoaPods官网</a></p>
<p>这个工具在2011年就有了，我是刚刚知道，尝试着使用了一下，感觉很棒。下面就记录从安装到使用的过程：</p>
<ul>
<li>安装</li>
<li>使用</li>
<li>问题</li>
</ul>
<h3 id="-"><strong>安装</strong></h3>
<p><strong>第一步：</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="built_in">sudo</span> gem install cocoapods
</pre></td></tr></table></figure>

<p><strong>第二步：</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>pod setup
</pre></td></tr></table></figure>

<p>以上两步都会比较慢，第二步特别慢，请耐心等待。第二步的时候是在下载数据，你可以到<code>~/.cocoapods</code>目录下，查看下载进度<code>du -sh *</code>。</p>
<h3 id="-"><strong>使用</strong></h3>
<p><strong>第一步：</strong></p>
<p>在项目根目录下创建一个名为<strong>Podfile</strong>的文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>touch 项目根目录/Podfile
</pre></td></tr></table></figure>

<p><strong>第二步：</strong></p>
<p>将需要用到的库名称写到文件中，以<code>SDWebImage</code>和<code>JSONKit</code>为例：<br>在编写<strong>Podfile</strong>之前，先来看看CocoaPods中有没有这两个库，需要用<code>pod search</code>命令搜索一下，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>pod search SDWebImage
</pre></td></tr></table></figure>

<p>然后看到这样的信息，</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>-<span class="ruby">&gt; <span class="constant">SDWebImage</span> (<span class="number">3.5</span>.<span class="number">2</span>)
</span>   Asynchronous image downloader with cache support with an UIImageView category.
   pod 'SDWebImage', '~&gt; 3.5.2'
   -<span class="ruby"> <span class="constant">Homepage</span><span class="symbol">:</span> <span class="symbol">https:</span>/<span class="regexp">/github.com/rs</span><span class="regexp">/SDWebImage
</span></span>   -<span class="ruby"> <span class="constant">Source</span><span class="symbol">:</span>   <span class="symbol">https:</span>/<span class="regexp">/github.com/rs</span><span class="regexp">/SDWebImage.git
</span></span>   -<span class="ruby"> <span class="constant">Versions</span><span class="symbol">:</span> <span class="number">3.5</span>.<span class="number">2</span>, <span class="number">3.5</span>.<span class="number">1</span>, <span class="number">3.5</span>, <span class="number">3.4</span>, <span class="number">3.3</span>, <span class="number">3.2</span>, <span class="number">3.1</span>, <span class="number">3.0</span>, <span class="number">2.7</span>.<span class="number">4</span>, <span class="number">2.7</span>, <span class="number">2.6</span>, <span class="number">2.5</span>, <span class="number">2.4</span> [master repo]
</span>   -<span class="ruby"> <span class="constant">Sub</span> <span class="symbol">specs:</span>
</span>     -<span class="ruby"> <span class="constant">SDWebImage</span>/<span class="constant">Core</span> (<span class="number">3.5</span>.<span class="number">2</span>)
</span>     -<span class="ruby"> <span class="constant">SDWebImage</span>/<span class="constant">MapKit</span> (<span class="number">3.5</span>.<span class="number">2</span>)
</span>     -<span class="ruby"> <span class="constant">SDWebImage</span>/<span class="constant">WebP</span> (<span class="number">3.5</span>.<span class="number">2</span>)</span>
</pre></td></tr></table></figure>

<p>这就说明这个库存在，看到<code>pod &#39;SDWebImage&#39;, &#39;~&gt; 3.5.2’</code>这句了吗，复制一下，等会会用到。同理，JSONKit也可以这样查看一下相关信息。</p>
<p>好了，现在我们可以编写<strong>Podfile</strong>文件了，文件的具体格式如下（记事本打开还是vim打开，各位请随意）：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>platform <span class="symbol">:ios</span>
pod <span class="string">'SDWebImage'</span>, <span class="string">'~&gt; 3.5.2'</span>
pod <span class="string">'JSONKit'</span>, <span class="string">'~&gt; 1.5pre'</span>
</pre></td></tr></table></figure>

<p>注意：<code>platform :ios</code>，冒号前后，前面有空格，后面没有空格，否则会出错的。</p>
<p><strong>第三步：</strong></p>
<p>先cd到项目根目录，执行下面命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>pod <span class="keyword">install</span>
</pre></td></tr></table></figure>

<p>到此基本上就OK了。打开项目根目录瞧瞧，是不是有点不一样了，目录结构大概是这样<br><img src="/image/how-to-use-cocoapods-in-ios-project/cocoapods_1.png" alt=""><br>然后用.xcworkspace打开工程就OK了<br>更改了Podfile文件，就需要重新运行一下这条命令<code>pod install</code></p>
<h3 id="-"><strong>问题</strong></h3>
<p><strong>1、在项目工程中无法引用类库</strong></p>
<p>你发现了吗？你想使用<code>#import &quot;JSONKit.h”</code>，发现根本没有，你试试<code>#import &lt;JSONKit.h&gt;</code>，这个应该是可以的，而且在程序中也能使用了，完全没问题。但是对于优点强迫症的我，还是需要引号也能引用类库。具体的办法如下：<br>在项目工程的targets中，不是pod工程，<code>Build Setting -&gt; User header Search Paths</code>，新建一个path<code>${SRCROOT}</code>，并且路径选择为<code>recusive</code>，然后你再试试<code>#import &quot;JSONKit.h”</code>，应该没问题了。</p>
<p><strong>2、执行<code>pod install</code>后，出现这样的提示：</strong></p>
<pre><code>[!] The target `project name [Debug]` overrides the `OTHER_LDFLAGS` build setting defined in `Pods/Pods.xcconfig&#39;.
- Use the `$(inherited)` flag, or
- Remove the build settings from the target.
</code></pre><p>感觉不是每次会出现，我第一次的时候出现这样的提醒，你可以<a href="http://www.99css.com/archives/1346" target="_blank">参考这里</a></p>
<p><strong>3、执行<code>pod</code>命令时，总是出现这样的一个错误</strong>  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>/System/Library/Frameworks/Ruby<span class="preprocessor">.framework</span>/Versions/<span class="number">2.0</span>/usr/lib/ruby/<span class="number">2.0</span><span class="number">.0</span>/universal-darwin13/rbconfig<span class="preprocessor">.rb</span>:<span class="number">212</span>: warning: Insecure world writable dir /usr/local/bin <span class="keyword">in</span> PATH, mode <span class="number">040707</span>
</pre></td></tr></table></figure>

<p>答案尚不知</p>
<p>参考文章：<br><a href="http://blog.devtang.com/blog/2012/12/02/use-cocoapod-to-manage-ios-lib-dependency/" target="_blank">《使用CocoaPods来做iOS程序的包依赖管理》</a><br><a href="http://code4app.com/article/cocoapods-install-usage" target="_blank">《CocoaPods安装和使用教程》</a><br><a href="http://www.99css.com/archives/1346" target="_blank">《CocoaPods 出现 OTHER_LDFLAGS 错误的解决方法》</a></p>
<p><strong>在使用过程中，再遇到情况，会持续更新</strong></p>
]]></content>
    <summary type="html"><![CDATA[<p>在求快、求快、求更快的IT行业，项目的开发效率一直被视为项目成功与否的关键因素。作为开发人员，如果码码躬亲，当然不太可取，能利用别人的开源的第三方类库，那是最好不过的事情了。然而当一个项目中使用了十几个第三方类库的时候，你有没有想过要如何管理这些类库呢？<br>在iOS项目中，<strong>CocoaPods</strong>便是这样一款工具。</p>
<p>]]></summary>
    
      <category term="iOS" scheme="http://syxiaqj.github.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://syxiaqj.github.io/tags/CocoaPods/"/>
    
      <category term="iOS" scheme="http://syxiaqj.github.io/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello, My blog]]></title>
    <link href="http://syxiaqj.github.io/2014/02/11/hello-my-blog/"/>
    <id>http://syxiaqj.github.io/2014/02/11/hello-my-blog/</id>
    <published>2014-02-11T06:18:36.000Z</published>
    <updated>2014-02-11T09:45:12.000Z</updated>
    <content type="html"><![CDATA[<p>经过一番摸索与学习，这个博客算是基本搭起来了，先给自己鼓掌一下（嘿嘿）。</p>
<p>从此开启博客，在这里记录自己的学习与生活。希望若干时间以后，回头看看，还能记起当初的时间花在哪里了。</p>
<p>第一篇博文，就说说这个博客的诞生与打算吧。</p>
<p><a id="more"></a></p>
<h3 id="-"><strong>为什么打算写博客了</strong></h3>
<p>时间老人，从来不曾停下自己的脚步。看似也比较努力的人，当自己坐下来想想，做成过什么事情的时候，却也乏善可陈。我想，我应该把自己的的学习生活，记录一下了。特别作为一名技术人员，技术的积累也非常重要。就像计算机的内存毕竟有限，大量的数据还是需要借助硬盘来储存下来一样，大脑虽然还是，却也“好记性不如烂笔头”。</p>
<h3 id="-"><strong>为什么要自己搭建一个博客</strong></h3>
<p>现在各大门户与一些专门的博客网站上去建一个自己的博客，也是非常方便的。自己搭建一个博客，有麻烦有费事，为什么呢？作为一名技术人员，当然希望玩一玩新鲜的技术（利用开源框架搭建自己的博客，也已经不是什么特别新鲜的东西了，只是对于我来说，这是第一次尝试），这也算一种探索精神吧。能自己动手建立一个自己的博客，用shell工具写博客，用命令行发布博客，这是一件多么cool的事情。有种黑客的赶脚，瞬间就高大上了，有木有。这才是能体现干技术的价值嘛！</p>
<h3 id="-hexo-"><strong>为什么要hexo这个开源框架</strong></h3>
<p>先对这个开源框架的作者<a href="https://github.com/tommy351/hexo" target="_blank">tommy351</a>崇拜一下，来自海峡对岸，据说是位大学生。至于hexo到底是个什么，我只知道是个基于node.js搭建静态博客的开源框架，江湖传言它快速、简单、功能强大。虽然我也没用过jekyll、Octopress、Wordpress，但是大家用过都说hexo好，我想，那就它了。链接：<a href="http://zespia.tw/hexo/" target="_blank">hexo官网</a></p>
<h3 id="-"><strong>搭建这个博客不容易</strong></h3>
<p>问题一，node.js安装有问题。作为一个ios开发人员，对于node.js毫无概念，虽说只要安装一下node就好了，安装包也能下载，但就是安装有问题，在install hexo的时候，一直报错。这个问题折腾了我很久，后来让服务端懂node.js的大哥，帮我卸载重装了。<br>问题二，上传git后不会使用git pages，主要也是没有用过，现在基本上会用了。<br>问题三，hexo的文件结构尚不是很清楚，当然主要也是刚开始用，想自己改改页面布局的时候，就有点不知所错了，生怕改错点什么。<br>这里就不再赘述了，下次会好好把所有的问题都整理一下。</p>
<h3 id="-"><strong>感谢</strong></h3>
<p>对于我这样的小白而言，能把这个博客搭建起来，是离不开别人的帮助的。网上的资料，主要来自<a href="http://zipperary.com/categories/hexo/" target="_blank">zippera</a>，感谢他的分享。对于小白而言，有时候其实是看不懂资料的，很多不懂的问题，都问一个人称“刘指导”的<a href="http://weibo.com/jimnox" target="_blank">吉姆</a>，非常感谢他的耐心指导。还要感谢，单位的胖子，帮我搞定node.js的安装。</p>
<h3 id="-"><strong>打算</strong></h3>
<p>这个博客，还是以写技术为主，打算能每周更新一篇技术博文。希望能坚持住！</p>
<h3 id="-"><strong>后记</strong></h3>
<p>大家都叫我<a href="http://weibo.com/109028053" target="_blank">员员</a>。</p>
<p>一直是个技术的小白，曾经不知道技术为何物，甚至不敢在电脑上装QQ（看观莫笑），第一堂程序课，找不到老师说的“输入”在哪，很久以后才知道原来，就是控制台打一行代码<code>cin&gt;&gt;a</code>。</p>
<p>现在做iOS开发，却深感技艺不精，所以要努力学习。</p>
<p>关注社会时事热点，听别人的意见，并且有自己的判断。明白，生存是最基本的奋斗目标，当然，心存诗与远方。</p>
<p>技术是海，深不见底；生活是洋，广不着边；而我如浪花，清澈透明并且舞动双手，仰望天空。</p>
<p>加油！</p>
]]></content>
    <summary type="html"><![CDATA[<p>经过一番摸索与学习，这个博客算是基本搭起来了，先给自己鼓掌一下（嘿嘿）。</p>
<p>从此开启博客，在这里记录自己的学习与生活。希望若干时间以后，回头看看，还能记起当初的时间花在哪里了。</p>
<p>第一篇博文，就说说这个博客的诞生与打算吧。</p>
<p>]]></summary>
    
      <category term="杂记" scheme="http://syxiaqj.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
      <category term="杂记" scheme="http://syxiaqj.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
</feed>
